#!/usr/bin/env zsh

# ==========================================
# SECRETS TEMPLATE - COPY TO ~/.secrets
# ==========================================
# This file contains sensitive configuration that should NOT be committed to git
# Copy this file to ~/.secrets and set proper permissions: chmod 600 ~/.secrets
#
# SECURITY WARNING:
# - Never commit this file to version control
# - Always use 600 permissions (owner read/write only)
# - Use environment-specific values, not production secrets in development
# - Regularly rotate API keys and secrets
# - Use dedicated tools like 1Password CLI for production secrets

# ==========================================
# INSTRUCTIONS
# ==========================================
# 1. Copy this file to your home directory:
#    cp .secrets.template ~/.secrets
#
# 2. Set secure permissions:
#    chmod 600 ~/.secrets
#
# 3. Edit the file and add your actual values:
#    $EDITOR ~/.secrets
#
# 4. Source it in your shell (automatically done by .zshrc):
#    source ~/.secrets

# ==========================================
# AWS CONFIGURATION
# ==========================================

# AWS Access Keys (use AWS CLI profiles instead when possible)
# export AWS_ACCESS_KEY_ID="your_access_key_here"
# export AWS_SECRET_ACCESS_KEY="your_secret_key_here"
# export AWS_SESSION_TOKEN="your_session_token_here"  # For temporary credentials

# AWS Default Configuration
# export AWS_DEFAULT_REGION="us-west-2"
# export AWS_DEFAULT_OUTPUT="json"

# AWS Profiles (if you prefer environment variables)
# export AWS_PROFILE="development"

# ==========================================
# API KEYS & TOKENS
# ==========================================

# GitHub Personal Access Token
# export GITHUB_TOKEN="ghp_your_token_here"

# OpenAI API Key
# export OPENAI_API_KEY="sk-your_key_here"

# Google Cloud Platform
# export GOOGLE_APPLICATION_CREDENTIALS="/path/to/service-account.json"
# export GOOGLE_CLOUD_PROJECT="your-project-id"

# Azure
# export AZURE_CLIENT_ID="your_client_id"
# export AZURE_CLIENT_SECRET="your_client_secret"
# export AZURE_TENANT_ID="your_tenant_id"

# Digital Ocean
# export DIGITALOCEAN_TOKEN="your_token_here"

# Heroku
# export HEROKU_API_KEY="your_api_key_here"

# Slack
# export SLACK_BOT_TOKEN="xoxb-your_token_here"
# export SLACK_WEBHOOK_URL="https://hooks.slack.com/services/your/webhook/url"

# Twilio
# export TWILIO_ACCOUNT_SID="your_account_sid"
# export TWILIO_AUTH_TOKEN="your_auth_token"

# SendGrid
# export SENDGRID_API_KEY="SG.your_api_key_here"

# Stripe
# export STRIPE_PUBLISHABLE_KEY="pk_test_your_key_here"
# export STRIPE_SECRET_KEY="sk_test_your_key_here"

# ==========================================
# DATABASE CREDENTIALS
# ==========================================

# PostgreSQL
# export POSTGRES_HOST="localhost"
# export POSTGRES_PORT="5432"
# export POSTGRES_DB="myapp_development"
# export POSTGRES_USER="myuser"
# export POSTGRES_PASSWORD="mypassword"

# MySQL
# export MYSQL_HOST="localhost"
# export MYSQL_PORT="3306"
# export MYSQL_DATABASE="myapp_development"
# export MYSQL_USER="myuser"
# export MYSQL_PASSWORD="mypassword"

# MongoDB
# export MONGODB_URI="mongodb://localhost:27017/myapp_development"

# Redis
# export REDIS_URL="redis://localhost:6379"

# ==========================================
# DEVELOPMENT ENVIRONMENT
# ==========================================

# Environment-specific API endpoints
# export DEV_API_BASE_URL="http://localhost:8000"
# export STAGING_API_BASE_URL="https://api-staging.yourdomain.com"
# export PROD_API_BASE_URL="https://api.yourdomain.com"

# Development database URLs
# export DATABASE_URL="postgresql://user:password@localhost/myapp_development"
# export TEST_DATABASE_URL="postgresql://user:password@localhost/myapp_test"

# Session secrets
# export SESSION_SECRET="your_very_long_random_session_secret_here"
# export JWT_SECRET="your_jwt_secret_here"

# Encryption keys
# export ENCRYPTION_KEY="your_encryption_key_here"

# ==========================================
# THIRD-PARTY SERVICES
# ==========================================

# Email Service
# export SMTP_HOST="smtp.gmail.com"
# export SMTP_PORT="587"
# export SMTP_USER="your-email@gmail.com"
# export SMTP_PASSWORD="your_app_password"

# S3 Compatible Storage
# export S3_ENDPOINT="https://s3.amazonaws.com"
# export S3_BUCKET="your-bucket-name"
# export S3_ACCESS_KEY="your_access_key"
# export S3_SECRET_KEY="your_secret_key"

# CDN
# export CDN_URL="https://cdn.yourdomain.com"

# Analytics
# export GOOGLE_ANALYTICS_ID="GA_MEASUREMENT_ID"
# export MIXPANEL_TOKEN="your_mixpanel_token"

# ==========================================
# CI/CD & DEPLOYMENT
# ==========================================

# Docker Registry
# export DOCKER_REGISTRY="your-registry.com"
# export DOCKER_USERNAME="your_username"
# export DOCKER_PASSWORD="your_password"

# Kubernetes
# export KUBECONFIG="/path/to/your/kubeconfig"

# Terraform
# export TF_VAR_aws_access_key="your_access_key"
# export TF_VAR_aws_secret_key="your_secret_key"

# ==========================================
# PERSONAL CONFIGURATION
# ==========================================

# Git configuration (if not using global config)
# export GIT_AUTHOR_NAME="Your Name"
# export GIT_AUTHOR_EMAIL="your.email@example.com"
# export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
# export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"

# Personal preferences
# export PREFERRED_EDITOR="code"
# export PREFERRED_BROWSER="chrome"

# ==========================================
# 1PASSWORD CLI INTEGRATION
# ==========================================

# If using 1Password CLI for secrets management, you can use op commands:
# export GITHUB_TOKEN="$(op read 'op://Private/GitHub Personal Access Token/credential')"
# export OPENAI_API_KEY="$(op read 'op://Private/OpenAI API Key/credential')"
# export AWS_ACCESS_KEY_ID="$(op read 'op://Private/AWS Development/username')"
# export AWS_SECRET_ACCESS_KEY="$(op read 'op://Private/AWS Development/password')"

# Note: This requires 1Password CLI to be installed and authenticated
# Install: brew install 1password-cli
# Setup: op account add

# ==========================================
# SECURITY REMINDERS
# ==========================================

# REMEMBER:
# 1. Never commit this file to git - it's in .gitignore for a reason
# 2. Use different secrets for different environments (dev/staging/prod)
# 3. Rotate secrets regularly
# 4. Use the principle of least privilege
# 5. Consider using dedicated secret management tools for production
# 6. Monitor for exposed secrets in your code and logs
# 7. Use strong, unique passwords and tokens
# 8. Enable 2FA wherever possible

# TOOLS FOR SECRET MANAGEMENT:
# - 1Password CLI: op
# - AWS Secrets Manager: aws secretsmanager
# - HashiCorp Vault: vault
# - Azure Key Vault: az keyvault
# - Google Secret Manager: gcloud secrets

# ==========================================
# VALIDATION FUNCTIONS
# ==========================================

# Function to validate that secrets file has correct permissions
validate-secrets-permissions() {
    local secrets_file="$HOME/.secrets"

    if [[ ! -f "$secrets_file" ]]; then
        echo "ℹ️  No .secrets file found"
        return 0
    fi

    local perms=$(stat -f "%A" "$secrets_file" 2>/dev/null || stat -c "%a" "$secrets_file" 2>/dev/null)

    if [[ "$perms" == "600" ]]; then
        echo "✅ .secrets file has correct permissions (600)"
    else
        echo "🚨 WARNING: .secrets file has insecure permissions ($perms)"
        echo "Fix with: chmod 600 ~/.secrets"
        return 1
    fi
}

# Function to check for common secret leaks
check-for-secrets() {
    local target="${1:-.}"

    echo "🔍 Scanning for potential secrets in: $target"

    # Patterns to look for
    local patterns=(
        "password.*=.*['\"][^'\"]*['\"]"
        "api[_-]?key.*=.*['\"][^'\"]*['\"]"
        "secret.*=.*['\"][^'\"]*['\"]"
        "token.*=.*['\"][^'\"]*['\"]"
        "aws[_-]?access[_-]?key"
        "aws[_-]?secret[_-]?key"
    )

    local found_secrets=false

    for pattern in "${patterns[@]}"; do
        if grep -r -i "$pattern" "$target" --exclude-dir=.git --exclude-dir=node_modules 2>/dev/null; then
            found_secrets=true
        fi
    done

    if [[ "$found_secrets" == "false" ]]; then
        echo "✅ No obvious secrets found in code"
    else
        echo "🚨 POTENTIAL SECRETS DETECTED!"
        echo "Please review the matches above and ensure no real secrets are exposed."
    fi
}

# Run validation on load (uncomment if desired)
# validate-secrets-permissions